
<h2>Home</h2>

<p>
    Welcome to the RpgManager template.  The goal of this template is to create project which suports .NET Web Api, AngularJS, Authentication, Authorization, and simple CRUD operations against web services.  This template shows one possible way to setup a .NET project which uses AngularJS.  There are other ways to setup the project as well, but this setup has worked for several of my projects.
</p>
<p>
    The RpgManager template utilizes the .NET Web Api and AngularJS.  the Web Api is used to expose services to potential clients, while angular is used for all frontend operations.  You will notice there are several other additions, such as jQuery and Bootstrap.  jQuery was added to support Bootstrap.  There are other bootstrap options, which play nice with Angular; but I choose regular bootstrap.
</p>
<p>
    A change has been made to WebApiConfig.cs, which changes all the routing for services.  By default, services are identified by the parameters they accept.  I modified this to identity services based on their name and their parameters.
</p>
<p>
    AppController.cs is used to give partial views upon request.  Such as App/Home will give the home page, and it will return the home.cshtml.  home.cshtml is a partial page, and it will be inserted in the ngView when returned from the server.
</p>
<p>
    Depending on your database setup, you may want to change your database connection string.  The default configuration for this template is this:
    <br/>
    name="applicationDB" providername="System.Data.SqlClient" connectionstring="Server=.;Database=applicationDB;Integrated Security=True"
</p>
<p>
    Future updates to this template might include:
</p>
<ul>
    <li>Refresh the authentication token on each page request.</li>
    <li>Account recovery services</li>
</ul>

